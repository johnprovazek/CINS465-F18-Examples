from django.shortcuts import render, HttpResponse
from django.http import JsonResponse
import urllib, json
import urllib.request
import requests
from myapp import models
import time
from datetime import datetime, timedelta
from itertools import chain


westernDict = {}
easternDict = {}
westernJSON = "{'1610612742': [0, -1, 0, 1, 0, -1, -2, -3, -4, -5, -4, -5, -4, -3, -2, -1, -2, -1, 0, 1, 0, 1, 2, 1, 2, 3, 4], '1610612743': [0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 9], '1610612744': [0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 9, 8, 9, 8, 7, 6, 5, 6, 7, 8, 7, 6, 7, 8, 9, 10], '1610612745': [0, -1, 0, -1, -2, -3, -4, -3, -2, -1, -2, -3, -2, -1, 0, 1, 2, 1, 0, -1, -2, -1, 0, -1, -2, -3, -2], '1610612746': [0, -1, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 8, 7, 8, 7], '1610612747': [0, -1, -2, -3, -2, -1, -2, -3, -2, -1, -2, -1, 0, 1, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5, 6, 5, 6, 7], '1610612763': [0, -1, 0, 1, 0, 1, 2, 3, 2, 1, 2, 3, 2, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 5, 6, 5, 4, 5], '1610612750': [0, -1, 0, -1, 0, -1, -2, -1, 0, -1, -2, -3, -4, -5, -4, -3, -2, -3, -4, -3, -2, -1, 0, -1, 0, 1, 0, -1], '1610612740': [0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -1, 0, 1, 0, 1, 2, 3, 2, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0], '1610612760': [0, -1, -2, -3, -4, -3, -2, -1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 8], '1610612756': [0, 1, 0, -1, -2, -3, -4, -5, -6, -5, -6, -7, -8, -9, -8, -9, -10, -11, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20], '1610612757': [0, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 6, 7, 6, 5, 4, 5, 4, 3, 2, 3, 4, 3, 2], '1610612758': [0, -1, -2, -1, -2, -1, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0, 1, 2, 1, 0, -1, 0, 1, 2, 1, 2], '1610612759': [0, 1, 0, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 1, 0, 1, 0, -1, 0, -1, 0, -1, -2, -1, -2, -3, -2, -1, 0], '1610612762': [0, 1, 0, -1, 0, 1, 2, 1, 0, -1, -2, -1, 0, 1, 0, -1, 0, -1, -2, -3, -2, -3, -2, -1, -2, -1, 0, -1, -2, -1]}";


easternJSON = "{'1610612737': [0, -1, -2, -1, 0, -1, -2, -3, -4, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -12, -11, -12, -13, -14, -15, -14], '1610612738': [0, 1, 0, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6], '1610612751': [0, -1, 0, -1, 0, -1, -2, -3, -2, -3, -2, -1, 0, -1, -2, -3, -2, -3, -2, -3, -4, -5, -6, -7, -8, -9, -10, -9, -8], '1610612766': [0, -1, 0, 1, 0, -1, 0, -1, 0, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, -2, -1, 0], '1610612741': [0, -1, -2, -3, -2, -3, -2, -3, -4, -5, -6, -5, -6, -5, -6, -7, -8, -9, -8, -9, -10, -11, -12, -13, -14, -15, -14, -15, -16], '1610612739': [0, -1, -2, -3, -4, -5, -6, -5, -6, -7, -8, -9, -10, -9, -10, -11, -12, -11, -10, -11, -12, -13, -14, -13, -14, -15, -14, -15], '1610612765': [0, 1, 2, 3, 4, 3, 2, 1, 0, -1, 0, 1, 0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1], '1610612754': [0, 1, 0, 1, 0, 1, 2, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 6, 7], '1610612748': [0, -1, 0, -1, 0, 1, 0, -1, -2, -1, 0, -1, -2, -3, -2, -3, -4, -5, -4, -5, -6, -5, -4, -5, -4, -3, -4], '1610612749': [0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 10], '1610612752': [0, 1, 0, -1, -2, -3, -4, -3, -4, -3, -4, -5, -4, -5, -6, -7, -8, -9, -10, -9, -8, -7, -8, -9, -8, -9, -10, -11, -12], '1610612753': [0, 1, 0, -1, 0, -1, -2, -3, -4, -3, -2, -3, -2, -1, -2, -1, 0, 1, 0, -1, 0, -1, -2, -1, 0, -1, -2, -3], '1610612755': [0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 2, 1, 2, 3, 2, 3, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 10], '1610612761': [0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 15, 16, 15, 16, 15, 14], '1610612764': [0, -1, -2, -1, -2, -3, -4, -5, -6, -5, -6, -7, -6, -5, -4, -5, -6, -5, -6, -5, -4, -5, -6, -5, -4, -3, -4, -5]}";
#
#
#
# # TODO: get this to work for future seasons
# # TODO: how allstar weekend and summer will work unknown?
# # TODO: feb 29?
# # TODO: make this only check last month. more efficient.
# start_year = 2018;
# start_month = 10;
# start_day = 16;
# days_in_month = [None,31,28,31,30,31,30,31,31,30,31,30,31];
#
#
# # full_time = datetime.today() - timedelta(hours=12, minutes=0);
# # cur_year = int(full_time.strftime('%Y'));
# # cur_month = int(full_time.strftime('%m'));
# # cur_day = int(full_time.strftime('%d'));
#
#
#
#
#
# with urllib.request.urlopen("http://data.nba.net/data/10s/prod/v1/20181015/standings_conference.json") as url:
#     s = url.read()
# data = json.loads(s)
# for team in data['league']['standard']['conference']['west']:
#     list = [0]
#     westernDict[team['teamId']] = list
# for team in data['league']['standard']['conference']['east']:
#     list = [0]
#     easternDict[team['teamId']] = list
#
#
# # Updates the standings every hour
# # while True:
# print('loop-start')
# # Time is 4 hours behind pacific time
# full_time = datetime.today() - timedelta(hours=12, minutes=0);
# cur_year = int(full_time.strftime('%Y'));
# cur_month = int(full_time.strftime('%m'));
# cur_day = int(full_time.strftime('%d'));
# print (cur_day);
# range_one = range(start_month, 13);
# range_two = range(0,0);
# if cur_month < start_month:
#     range_two = range(1, cur_month+1);
# # Looping through months
# for month in chain(range_one, range_two):
#     loop_start_day = 1;
#     loop_end_day = days_in_month[month];
#     if month == start_month:
#         loop_start_day = start_day;
#     if month == cur_month:
#         loop_end_day = cur_day;
#     # Looping through days
#     for day in range(loop_start_day, loop_end_day+1):
#         str_month = str(month)
#         str_day = str(day)
#         if month < 10:
#             str_month = "0" + str_month;
#         if day < 10:
#             str_day = "0" + str_day;
#         print(month, day)
#         with urllib.request.urlopen("http://data.nba.net/data/10s/prod/v1/2018"+ str_month + str_day +"/standings_conference.json") as url:
#             s = url.read()
#         data = json.loads(s)
#         for team in data['league']['standard']['conference']['west']:
#             if(westernDict[team['teamId']][-1] != int(team['win'])-int(team['loss'])):
#                 westernDict[team['teamId']].append(int(team['win'])-int(team['loss']))
#         for team in data['league']['standard']['conference']['east']:
#             if(easternDict[team['teamId']][-1] != int(team['win'])-int(team['loss'])):
#                 easternDict[team['teamId']].append(int(team['win'])-int(team['loss']))
#         print("dayend")
#     print("monthend")
# print("allend")
# western = models.FirstTry(data=westernDict);
# western.save();
# westernJSON = western.data;
# eastern = models.FirstTry(data=easternDict);
# eastern.save();
# easternJSON = eastern.data;
# print(westernJSON)
# # time.sleep(3600)
# print("a")
#
#
#
# # {'1610612737': [0, -1, -2, -1, 0, -1, -2, -3, -4, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -12, -11, -12, -13, -14, -15, -14], '1610612738': [0, 1, 0, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 1, 2, 3, 2, 1, 0, 1, 0, 1, 2, 3, 4, 5, 6], '1610612751': [0, -1, 0, -1, 0, -1, -2, -3, -2, -3, -2, -1, 0, -1, -2, -3, -2, -3, -2, -3, -4, -5, -6, -7, -8, -9, -10, -9, -8], '1610612766': [0, -1, 0, 1, 0, -1, 0, -1, 0, -1, 0, 1, 0, 1, 0, -1, 0, 1, 0, -1, 0, 1, 0, -1, -2, -1, 0], '1610612741': [0, -1, -2, -3, -2, -3, -2, -3, -4, -5, -6, -5, -6, -5, -6, -7, -8, -9, -8, -9, -10, -11, -12, -13, -14, -15, -14, -15, -16], '1610612739': [0, -1, -2, -3, -4, -5, -6, -5, -6, -7, -8, -9, -10, -9, -10, -11, -12, -11, -10, -11, -12, -13, -14, -13, -14, -15, -14, -15], '1610612765': [0, 1, 2, 3, 4, 3, 2, 1, 0, -1, 0, 1, 0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1], '1610612754': [0, 1, 0, 1, 0, 1, 2, 1, 2, 3, 4, 3, 2, 3, 2, 3, 4, 5, 4, 3, 4, 5, 4, 3, 4, 5, 6, 7], '1610612748': [0, -1, 0, -1, 0, 1, 0, -1, -2, -1, 0, -1, -2, -3, -2, -3, -4, -5, -4, -5, -6, -5, -4, -5, -4, -3, -4], '1610612749': [0, 1, 2, 3, 4, 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 10], '1610612752': [0, 1, 0, -1, -2, -3, -4, -3, -4, -3, -4, -5, -4, -5, -6, -7, -8, -9, -10, -9, -8, -7, -8, -9, -8, -9, -10, -11, -12], '1610612753': [0, 1, 0, -1, 0, -1, -2, -3, -4, -3, -2, -3, -2, -1, -2, -1, 0, 1, 0, -1, 0, -1, -2, -1, 0, -1, -2, -3], '1610612755': [0, -1, 0, 1, 0, -1, 0, 1, 0, 1, 2, 1, 2, 3, 2, 3, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 10], '1610612761': [0, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 10, 11, 10, 9, 8, 9, 10, 11, 12, 13, 14, 15, 16, 15, 16, 15, 14], '1610612764': [0, -1, -2, -1, -2, -3, -4, -5, -6, -5, -6, -7, -6, -5, -4, -5, -6, -5, -6, -5, -4, -5, -6, -5, -4, -3, -4, -5]}
#
#
#
# # {'1610612742': [0, -1, 0, 1, 0, -1, -2, -3, -4, -5, -4, -5, -4, -3, -2, -1, -2, -1, 0, 1, 0, 1, 2, 1, 2, 3, 4], '1610612743': [0, 1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 6, 5, 4, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 9], '1610612744': [0, 1, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 9, 8, 9, 8, 7, 6, 5, 6, 7, 8, 7, 6, 7, 8, 9, 10], '1610612745': [0, -1, 0, -1, -2, -3, -4, -3, -2, -1, -2, -3, -2, -1, 0, 1, 2, 1, 0, -1, -2, -1, 0, -1, -2, -3, -2], '1610612746': [0, -1, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 2, 3, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 8, 7, 8, 7], '1610612747': [0, -1, -2, -3, -2, -1, -2, -3, -2, -1, -2, -1, 0, 1, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5, 6, 5, 6, 7], '1610612763': [0, -1, 0, 1, 0, 1, 2, 3, 2, 1, 2, 3, 2, 3, 4, 5, 6, 7, 6, 5, 4, 5, 4, 5, 6, 5, 4, 5], '1610612750': [0, -1, 0, -1, 0, -1, -2, -1, 0, -1, -2, -3, -4, -5, -4, -3, -2, -3, -4, -3, -2, -1, 0, -1, 0, 1, 0, -1], '1610612740': [0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -1, 0, 1, 0, 1, 2, 3, 2, 1, 0, -1, 0, -1, 0, -1, 0, -1, 0, -1, 0], '1610612760': [0, -1, -2, -3, -4, -3, -2, -1, 0, 1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 5, 6, 7, 8, 9, 8, 9, 8], '1610612756': [0, 1, 0, -1, -2, -3, -4, -5, -6, -5, -6, -7, -8, -9, -8, -9, -10, -11, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20], '1610612757': [0, 1, 2, 1, 2, 1, 2, 3, 4, 3, 4, 5, 6, 7, 6, 5, 6, 7, 6, 5, 4, 5, 4, 3, 2, 3, 4, 3, 2], '1610612758': [0, -1, -2, -1, -2, -1, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0, 1, 2, 1, 0, -1, 0, 1, 2, 1, 2], '1610612759': [0, 1, 0, 1, 0, 1, 2, 3, 4, 3, 2, 3, 2, 1, 0, 1, 0, -1, 0, -1, 0, -1, -2, -1, -2, -3, -2, -1, 0], '1610612762': [0, 1, 0, -1, 0, 1, 2, 1, 0, -1, -2, -1, 0, 1, 0, -1, 0, -1, -2, -3, -2, -3, -2, -1, -2, -1, 0, -1, -2, -1]}
